"use strict";(self.webpackChunktp_spring_batch=self.webpackChunktp_spring_batch||[]).push([[2703],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81418:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),s=["components"],o={sidebar_position:4},l="Mes premiers tests automatis\xe9s",u={unversionedId:"tutorial-basics/first-test",id:"tutorial-basics/first-test",isDocsHomePage:!1,title:"Mes premiers tests automatis\xe9s",description:"Nous utiliserons JUnit 5 pour les tests de ce tutoriel.",source:"@site/docs/tutorial-basics/first-test.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/first-test",permalink:"/docusaurus-test/docs/tutorial-basics/first-test",editUrl:"https://github.com/GoroGoraK/docusaurus-test/docs/tutorial-basics/first-test.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Param\xe8tres de Job",permalink:"/docusaurus-test/docs/tutorial-basics/jobparameter"},next:{title:"Introduction au traitement par lot",permalink:"/docusaurus-test/docs/tutorial-lot/lot-intro"}},c=[{value:"Objectifs",id:"objectifs",children:[]},{value:"Partie TU <code>src/test/java</code>",id:"partie-tu-srctestjava",children:[{value:"Configuration",id:"configuration",children:[]},{value:"D\xe9veloppement <em>Java</em>",id:"d\xe9veloppement-java",children:[]},{value:"Lancement des tests unitaires",id:"lancement-des-tests-unitaires",children:[]}]},{value:"Partie TI <code>src/it/java</code>",id:"partie-ti-srcitjava",children:[{value:"Configuration",id:"configuration-1",children:[]},{value:"D\xe9veloppement <em>Java</em>",id:"d\xe9veloppement-java-1",children:[]},{value:"Lancement des tests d&#39;int\xe9gration",id:"lancement-des-tests-dint\xe9gration",children:[]}]},{value:"Automatisation des tests",id:"automatisation-des-tests",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mes-premiers-tests-automatis\xe9s"},"Mes premiers tests automatis\xe9s"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Nous utiliserons JUnit 5 pour les tests de ce tutoriel."))),(0,i.kt)("h2",{id:"objectifs"},"Objectifs"),(0,i.kt)("p",null,"L'objectif de ce TP sera de mettre en oeuvre nos premiers tests unitaires et d'int\xe9gration."),(0,i.kt)("p",null,"Nous nous contenterons de deux classes de tests : la premi\xe8re pour les tests unitaires (fichier pr\xe9sent, fichier absent), et la seconde pour le test d'int\xe9gration (le job a tourn\xe9 sans erreur)."),(0,i.kt)("p",null,"Voici la structure \xe0 atteindre lors de cette partie :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ud83d\udce6tutorial-spring-batch\n\u2523 \ud83d\udcc2src\n\u2503 \u2523 \ud83d\udcc2main\n\u2503 \u2503 \u2523 \ud83d\udcc2java\n\u2503 \u2503 \u2503 \u2517\ud83d\udd38fr.goro.tutorial.spring.batch\n\u2503 \u2503 \u2503   \u2503  \u2139\ufe0f Package racine du code source de l'application\n\u2503 \u2503 \u2503   \u2523\ud83d\udd38firstbatch\n\u2503 \u2503 \u2503   \u2503 \u2503  \u2139\ufe0f Package racine de notre premier batch\n\u2503 \u2503 \u2503   \u2503 \u2523\ud83d\udd38config\n\u2503 \u2503 \u2503   \u2503 \u2503  \u2503 \u2139\ufe0f Package contenant la d\xe9finition des @Bean Spring, les classes \xe0 d\xe9velopper ici sont suffix\xe9es du mode Configuration (ou Config)\n\u2503 \u2503 \u2503   \u2503 \u2503  \u2523\ud83d\udd38step\n\u2503 \u2503 \u2503   \u2503 \u2503  \u2503  \u2503 \u2139\ufe0f Package contenant la d\xe9finition  des @Bean Step\n\u2503 \u2503 \u2503   \u2503 \u2503  \u2503  \u2517 \ud83d\udcdcFirstTaskletStepConfiguration.java\n\u2503 \u2503 \u2503   \u2503 \u2503  \u2517 \ud83d\udcdcFirstBatchConfiguration.java\n\u2503 \u2503 \u2503   \u2503 \u2517\ud83d\udd38tasklet\n\u2503 \u2503 \u2503   \u2503  \u2503 \u2139\ufe0f Package contenant la logique m\xe9tier des tasklets.\n\u2503 \u2503 \u2503   \u2503  \u2517 \ud83d\udcdcFirstTasklet.java\n\u2503 \u2503 \u2503   \u2517 \ud83d\udcdcTutorialSpringBatchApplication.java\n\u2503 \u2503 \u2517 \ud83d\udcc2resources\n\u2503 \u2503   \u2503  \u2139\ufe0f Resources de l'application\n\u2503 \u2503   \u2517 \ud83d\udcdc application.yml\n\u2503 \u2523 \ud83d\udcc2test\n\u2503 \u2503 \u2523 \ud83d\udcc2java\n\u2503 \u2503 \u2503 \u2503  \u2139\ufe0f Code source des tests unitaires de l'application\n\u2503 \u2503 \u2503 \u2517\ud83d\udd38fr.goro.tutorial.spring.batch\n\u2503 \u2503 \u2503   \u2503  \u2139\ufe0f Package racine de nos tests unitaires\n\u2503 \u2503 \u2503   \u2517\ud83d\udd38firstbatch\n\u2503 \u2503 \u2503     \u2517\ud83d\udd38tasklet\n\u2503 \u2503 \u2503       \u2517 \ud83d\udcdcFirstTaskletTest.java\n\u2503 \u2503 \u2517 \ud83d\udcc2resources\n\u2503 \u2503   \u2503  \u2139\ufe0f Resources des tests unitaires (jeux de donn\xe9es,...)\n\u2503 \u2503   \u2517 \ud83d\udcc2firstbactch\n\u2503 \u2503      \u2517\ud83d\udcddfichier_a_traiter.txt\n\u2503 \u2517 \ud83d\udcc2it\n\u2503   \u2523 \ud83d\udcc2java\n\u2503   \u2503 \u2503 \u2139\ufe0f Code source des tests d'int\xe9gration\n\u2503   \u2503 \u2517\ud83d\udd38fr.goro.tutorial.spring.batch\n\u2503   \u2503   \u2503 \u2139\ufe0f Package racine de nos tests d'int\xe9gration\n\u2503   \u2503   \u2517\ud83d\udd38firstbatch\n\u2503   \u2503     \u2517 \ud83d\udcdcTutorialSpringBatchFirstITCase.java\n\u2503   \u2517 \ud83d\udcc2resources\n\u2503     \u2503 \u2139\ufe0f Resource des tests d'int\xe9gration (configuration Spring, ...)\n\u2503     \u2517 \ud83d\udcdcapplication.yml\n\u2517 \ud83d\udcdcpom.xml\n")),(0,i.kt)("p",null,"Une bonne pratique \xe0 utiliser est de 'ranger' correctement nos tests."),(0,i.kt)("h2",{id:"partie-tu-srctestjava"},"Partie TU ",(0,i.kt)("inlineCode",{parentName:"h2"},"src/test/java")),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Nous utiliserons le plugin ",(0,i.kt)("em",{parentName:"p"},"surefire")," pour lancer nos tests unitaires via Maven, nous utiliserons donc le suffixe ",(0,i.kt)("em",{parentName:"p"},"Test")," car c'est le plus commun, mais sachez qu'il en existe d'autre ",(0,i.kt)("a",{parentName:"p",href:"https://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html"},"que vous retrouverez ici"),"."),(0,i.kt)("p",null,"De ce fait, nous commencerons par configurer notre ",(0,i.kt)("em",{parentName:"p"},"pom")," pour y ajouter la d\xe9claration minimaliste de notre plugin."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="modification du pom.xml"',title:'"modification',du:!0,'pom.xml"':!0},"\x3c!-- Tests unitaires. Par d\xe9faut, Test, ... --\x3e\n<plugin>\n    <artifactId>maven-surefire-plugin</artifactId>\n</plugin>\n")),(0,i.kt)("h3",{id:"d\xe9veloppement-java"},"D\xe9veloppement ",(0,i.kt)("em",{parentName:"h3"},"Java")),(0,i.kt)("p",null,"Rien de bien particulier en terme de test unitaire pour ",(0,i.kt)("inlineCode",{parentName:"p"},"Spring Batch"),", il s'agira d'utiliser ",(0,i.kt)("em",{parentName:"p"},"JUnit")," comme sur n'importe quel autre projet ",(0,i.kt)("em",{parentName:"p"},"Java"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Astuce")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"On notera que moins nous \xe9crivons de code m\xe9tier (autre que de la configuration), moins nous aurons de test unitaire \xe0 d\xe9velopper \ud83d\ude01, d'o\xf9 l'importance d'utiliser correctement un maximum d'objet ",(0,i.kt)("em",{parentName:"p"},"Spring Batch")," existant."))),(0,i.kt)("h4",{id:"test-de-la-tasklet"},"Test de la Tasklet"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("a",{class:"btnfire small stroke"},(0,i.kt)("em",{class:"fas fa-chevron-circle-down"}),"Voir le code source du test unitaire")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="fr.goro.tutorial.spring.batch.firstbatch.tasklet.FirstTaskletTest.java"',title:'"fr.goro.tutorial.spring.batch.firstbatch.tasklet.FirstTaskletTest.java"'},"\npackage fr.goro.tutorial.spring.batch.firstbatch.tasklet;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.batch.core.step.tasklet.Tasklet;\nimport org.springframework.batch.repeat.RepeatStatus;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Classe de test de notre premi\xe8re tasklet.\n *\n */\nclass FirstTaskletTest {\n\n    /**\n     * Test unitaire de notre premi\xe8re tasklet dans un cas passant.\n     *\n     * Il v\xe9rifiera le statut d'ex\xe9cution de la tasklet apr\xe8s son ex\xe9cution.\n     */\n    @Test\n    void testExecuteTasklet_nonNullInputResource() throws Exception {\n        // Jeu de donn\xe9es.\n        final Resource inputResource = new ClassPathResource(\"firstbatch/fichier_a_traiter.txt\");\n\n        // Cr\xe9ation de la tasklet \xe0 tester.\n        final Tasklet taskletToTest = new FirstTasklet(inputResource);\n        final RepeatStatus repeatStatus = taskletToTest.execute(null, null);\n\n        // V\xe9rification\n        Assertions.assertEquals(RepeatStatus.FINISHED, repeatStatus);\n    }\n\n    /**\n     * Test unitaire de notre premi\xe8re tasklet dans un cas d'erreur.\n     *\n     * Il v\xe9rifiera la lev\xe9e d'erreur \xe0 l'ex\xe9cution de la tasklet.\n     */\n    @Test\n    void testExecuteTasklet_nullInputResource() throws Exception {\n        // Jeu de donn\xe9es.\n        final Resource inputResource = null;\n\n        // V\xe9rifications\n        final Exception exception = Assertions.assertThrows(IllegalArgumentException.class,\n                () -> new FirstTasklet(inputResource));\n        assertTrue(exception.getMessage().contains(\"Le fichier en entr\xe9e de la Tasklet ne peut \xeatre vide !\"));\n    }\n\n}\n\n"))),(0,i.kt)("h4",{id:"test-de-la-partie-config"},"Test de la partie Config"),(0,i.kt)("p",null,"Il n'est pas tr\xe8s pertinent de d\xe9velopper des tests unitaires sur les objets ",(0,i.kt)("em",{parentName:"p"},"Configuration")," tant le code source doit \xeatre tr\xe8s simple, de ce fait, nous n'en d\xe9velopperons pas durant ce tutorial."),(0,i.kt)("h3",{id:"lancement-des-tests-unitaires"},"Lancement des tests unitaires"),(0,i.kt)("p",null,"La plupart des IDE proposent des ",(0,i.kt)("em",{parentName:"p"},"Launcher")," sp\xe9cifiques \xe0 ",(0,i.kt)("em",{parentName:"p"},"JUnit")," (",(0,i.kt)("em",{parentName:"p"},"JUnit 5"),' ici), un simple clic droit sur package de test, sur une classe de test, ou directement sur une m\xe9thode de test, puis "Run As Junit" lancera le / les tests d\xe9sir\xe9s.'),(0,i.kt)("h2",{id:"partie-ti-srcitjava"},"Partie TI ",(0,i.kt)("inlineCode",{parentName:"h2"},"src/it/java")),(0,i.kt)("h3",{id:"configuration-1"},"Configuration"),(0,i.kt)("p",null,"Nous utiliserons le plugin ",(0,i.kt)("em",{parentName:"p"},"failsafe")," pour lancer nos tests d'int\xe9gration via Maven, nous utiliserons le suffixe ",(0,i.kt)("em",{parentName:"p"},"ITCase")," pour les tests de ",(0,i.kt)("em",{parentName:"p"},"Job"),", et ",(0,i.kt)("em",{parentName:"p"},"IT")," pour les tests de composant (",(0,i.kt)("em",{parentName:"p"},"Step"),", ",(0,i.kt)("em",{parentName:"p"},"Reader"),", ...) mais sachez qu'il en existe d'autre d'autre ",(0,i.kt)("a",{parentName:"p",href:"https://maven.apache.org/surefire/maven-failsafe-plugin/examples/inclusion-exclusion.html"},"que vous retrouverez ici"),"."),(0,i.kt)("p",null,"De ce fait, nous commencerons par configurer notre pom pour y ajouter la d\xe9claration minimaliste de notre plugin."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- Tests d'int\xe9gration. Par d\xe9faut, IT, ITCase, ... --\x3e\n<plugin>\n    <artifactId>maven-failsafe-plugin</artifactId>\n</plugin>\n")),(0,i.kt)("p",null,"Comme nous l'avons vu lors de la cr\xe9ation de la structure, nous utilisons un chemin diff\xe9rent de ",(0,i.kt)("inlineCode",{parentName:"p"},"src/test/resources")," pour les tests d'int\xe9gration. ",(0,i.kt)("inlineCode",{parentName:"p"},"src/it/java")," et ",(0,i.kt)("inlineCode",{parentName:"p"},"src/it/resources")," n'\xe9tant pas reconnu comme ",(0,i.kt)("em",{parentName:"p"},"package")," de test par d\xe9faut, il faut modifier le build de notre application afin d'ajouter les fichiers ",(0,i.kt)("em",{parentName:"p"},"IT")," au ",(0,i.kt)("em",{parentName:"p"},"classpath")," de test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- Copie des IT sources dans les target test sources. --\x3e\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>build-helper-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <id>add-integration-test-source</id>\n            <phase>generate-test-sources</phase>\n            <goals>\n                <goal>add-test-source</goal>\n            </goals>\n            <configuration>\n                <sources>\n                    <source>src/it/java</source>\n                </sources>\n            </configuration>\n        </execution>\n        <execution>\n            <id>add-test-resource</id>\n            <phase>generate-test-resources</phase>\n            <goals>\n                <goal>add-test-resource</goal>\n            </goals>\n            <configuration>\n                <resources>\n                    <resource>\n                        <directory>src/it/resources</directory>\n                    </resource>\n                </resources>\n            </configuration>\n        </execution>\n    </executions>\n\n    \x3c!-- Testing --\x3e\n    \x3c!-- Tests unitaires. Par d\xe9faut, Test, ... --\x3e\n    <plugin>\n        <artifactId>maven-surefire-plugin</artifactId>\n    </plugin>\n\n    \x3c!-- Tests d'int\xe9gration. Par d\xe9faut, IT, ITCase, ... --\x3e\n    <plugin>\n        <artifactId>maven-failsafe-plugin</artifactId>\n    </plugin>\n</plugin>\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build-helper-maven-plugin")," : `src/it/resources n'\xe9tant pas reconnu par maven, il aura \xe0 sa charge la copie des sources/resources IT"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maven-surefire-plugin")," : ayant \xe0 sa charge le lancement des tests unitaires"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maven-failsafe-plugin")," : ayant \xe0 sa charge le lancement des tests d'int\xe9gration.")))),(0,i.kt)("h3",{id:"d\xe9veloppement-java-1"},"D\xe9veloppement ",(0,i.kt)("em",{parentName:"h3"},"Java")),(0,i.kt)("p",null,"Nous d\xe9velopperons les tests d'un cas d'utilisation, le d\xe9coupage en package est plus libre, ici, on se placera simplement dans un package ",(0,i.kt)("inlineCode",{parentName:"p"},"firstbatch"),"."),(0,i.kt)("p",null,"Nous avons vu que nous utiliserons le plugin ",(0,i.kt)("em",{parentName:"p"},"failsafe")," pour lancer nos tests d'int\xe9gration via Maven, nous utiliserons le suffixe ",(0,i.kt)("em",{parentName:"p"},"ITCase")," pour les tests de ",(0,i.kt)("em",{parentName:"p"},"Job"),", et ",(0,i.kt)("em",{parentName:"p"},"IT")," pour les tests de composant (",(0,i.kt)("em",{parentName:"p"},"Step"),", ",(0,i.kt)("em",{parentName:"p"},"Reader"),", ...)."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("a",{class:"btnfire small stroke"},(0,i.kt)("em",{class:"fas fa-chevron-circle-down"}),"Voir le code source du test d'int\xe9gration")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="fr.goro.tutorial.spring.batch.firstbatch.TutorialSpringBatchFirstITCase.java"',title:'"fr.goro.tutorial.spring.batch.firstbatch.TutorialSpringBatchFirstITCase.java"'},"\npackage firstbatch;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.After;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.batch.core.ExitStatus;\nimport org.springframework.batch.core.JobExecution;\nimport org.springframework.batch.core.JobParameters;\nimport org.springframework.batch.core.JobParametersBuilder;\nimport org.springframework.batch.test.JobLauncherTestUtils;\nimport org.springframework.batch.test.JobRepositoryTestUtils;\nimport org.springframework.batch.test.context.SpringBatchTest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\nimport fr.goro.tutorial.spring.batch.firstbatch.config.FirstBatchConfiguration;\nimport fr.goro.tutorial.spring.batch.firstbatch.config.step.FirstTaskletStepConfiguration;\n\n/**\n * Classe de test d'int\xe9gration du premier batch.\n *\n * @see @SpringBatchTest pour la r\xe9cup\xe9ration de {@link JobLauncherTestUtils} et\n *      {@link JobRepositoryTestUtils}.\n * @see @TestPropertySource pour l'insertion d'un fichier properties hors du\n *      classPath.\n * @see @EnableAutoConfiguration pour l'auto configuration des beans n\xe9cessaire\n *      \xe0 SpringBatch.\n * @see @ContextConfiguration pour ne charger que les fichier de configuration\n *      du batch qui nous interesse.\n */\n@ExtendWith(SpringExtension.class)\n@SpringBatchTest\n@TestPropertySource(\"application.yml\")\n@EnableAutoConfiguration\n@ContextConfiguration(classes = { FirstBatchConfiguration.class, FirstTaskletStepConfiguration.class })\npublic class TutorialSpringBatchFirstITCase {\n\n    /**\n     * Classe utilitaire Spring Batch Test.\n     *\n     * Elle permet de lancer un job.\n     */\n    @Autowired\n    private JobLauncherTestUtils jobLauncherTestUtils;\n\n    /**\n     * Classe utilitaire Spring Batch Test.\n     *\n     * Elle permet l'acc\xe8s aux m\xe9tadatas Spring Batch.\n     */\n    @Autowired\n    private JobRepositoryTestUtils jobRepositoryTestUtils;\n\n    /**\n     * Clean des m\xe9tadatas Spring Batch.\n     */\n    @After\n    public void cleanUp() {\n        jobRepositoryTestUtils.removeJobExecutions();\n    }\n\n    /**\n     * Test d'int\xe9gration de notre premier batch.\n     *\n     * Il v\xe9rifiera que le Job est au statut \"COMPLETED\" (termin\xe9 sans erreur).\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testFirstBatch() throws Exception {\n        final JobExecution jobExecution = jobLauncherTestUtils.launchJob(defaultJobParameters());\n        final ExitStatus actualJobExitStatus = jobExecution.getExitStatus();\n\n        Assertions.assertThat(actualJobExitStatus).isEqualTo(ExitStatus.COMPLETED);\n    }\n\n    /**\n     * M\xe9thode d'initialisation des JobParameters.\n     *\n     * @return l'objet {@link JobParameters} initialis\xe9 pour le test.\n     */\n    private JobParameters defaultJobParameters() {\n        final JobParametersBuilder paramsBuilder = new JobParametersBuilder();\n        return paramsBuilder.toJobParameters();\n    }\n}\n\n"))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Il est possible de ne tester qu'une partie du traitement batch, la ",(0,i.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-batch/docs/current/reference/html/index-single.html#testing"},"documentation est par ici"),".")))),(0,i.kt)("h3",{id:"lancement-des-tests-dint\xe9gration"},"Lancement des tests d'int\xe9gration"),(0,i.kt)("p",null,'Comme pour les tests unitaires, un simple clic droit sur package de test, sur une classe de test, ou directement sur une m\xe9thode de test, puis "Run As Junit" lancera le / les tests d\xe9sir\xe9s.'),(0,i.kt)("h2",{id:"automatisation-des-tests"},"Automatisation des tests"),(0,i.kt)("p",null,"Avec cette configuration, il suffit de taper la commande (ou de cr\xe9er un ",(0,i.kt)("em",{parentName:"p"},"Launcher")," ",(0,i.kt)("em",{parentName:"p"},"Maven"),") :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mvn clean install\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Faisafe donne un param\xe9tre (boolean) de d\xe9sactivation des tests untaires, ainsi, la commande suivante ne lancera pas les tests d'int\xe9gration, mais uniquement les tests unitaires :")),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mvn clean install -DskipITs\n")),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Surefire donne un param\xe9tre (boolean) de d\xe9sactivation des tests d'int\xe9gration, ainsi, la commande suivante ne lancera aucun test :")),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mvn clean install -DskipTests\n")))),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Nous avons d\xe9sormais automatis\xe9 nos tests, ils sont ex\xe9cutables par une plateforme d'int\xe9gration continue (",(0,i.kt)("em",{parentName:"p"},"Jenkins")," par exemple)."),(0,i.kt)("p",null,"Avant d'aborder le sujet de la ",(0,i.kt)("em",{parentName:"p"},"datasource"),", nous allons apporter quelques modifications de configuration \xe0 notre application afin d'utiliser le concept de profil utilis\xe9 par ",(0,i.kt)("em",{parentName:"p"},"Spring"),"."))}d.isMDXComponent=!0}}]);